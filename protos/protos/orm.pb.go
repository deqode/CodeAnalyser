// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/outputs/languageSpecific/orm.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OrmOutput struct {
	// check orm
	Used bool `protobuf:"varint,1,opt,name=used" json:"used,omitempty"`
	// list of all orms
	Orms []*ORM `protobuf:"bytes,2,rep,name=orms" json:"orms,omitempty"`
}

func (m *OrmOutput) Reset()                    { *m = OrmOutput{} }
func (m *OrmOutput) String() string            { return proto.CompactTextString(m) }
func (*OrmOutput) ProtoMessage()               {}
func (*OrmOutput) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{0} }

func (m *OrmOutput) GetUsed() bool {
	if m != nil {
		return m.Used
	}
	return false
}

func (m *OrmOutput) GetOrms() []*ORM {
	if m != nil {
		return m.Orms
	}
	return nil
}

type ORM struct {
	//  name of orm
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	//  version of orm
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *ORM) Reset()                    { *m = ORM{} }
func (m *ORM) String() string            { return proto.CompactTextString(m) }
func (*ORM) ProtoMessage()               {}
func (*ORM) Descriptor() ([]byte, []int) { return fileDescriptor17, []int{1} }

func (m *ORM) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ORM) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*OrmOutput)(nil), "OrmOutput")
	proto.RegisterType((*ORM)(nil), "ORM")
}

func init() { proto.RegisterFile("protos/outputs/languageSpecific/orm.proto", fileDescriptor17) }

var fileDescriptor17 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8e, 0xbd, 0x0b, 0xc2, 0x30,
	0x10, 0xc5, 0xe9, 0x07, 0xda, 0x9e, 0x5b, 0xa6, 0x8c, 0xa5, 0x53, 0x5d, 0x1a, 0xb0, 0x93, 0xab,
	0x7b, 0x09, 0xc4, 0xcd, 0xad, 0xd6, 0x58, 0x02, 0x26, 0x17, 0xf2, 0xe1, 0xdf, 0x2f, 0x9e, 0x38,
	0xdd, 0xbb, 0xc7, 0xef, 0x07, 0x0f, 0x8e, 0x3e, 0x60, 0xc2, 0x28, 0x30, 0x27, 0x9f, 0x53, 0x14,
	0xaf, 0xc5, 0x6d, 0x79, 0xd9, 0xf4, 0xd5, 0xeb, 0xd5, 0x3c, 0xcd, 0x2a, 0x30, 0xd8, 0x91, 0x98,
	0xfe, 0x0c, 0xad, 0x0c, 0x56, 0x12, 0xc8, 0x18, 0xd4, 0x39, 0xea, 0x07, 0x2f, 0xba, 0x62, 0x68,
	0x14, 0x65, 0xc6, 0xa1, 0xc6, 0x60, 0x23, 0x2f, 0xbb, 0x6a, 0x38, 0x9c, 0xea, 0x51, 0xaa, 0x59,
	0x51, 0xd3, 0x4f, 0x50, 0x49, 0x35, 0x7f, 0x25, 0xb7, 0x58, 0x4d, 0x52, 0xab, 0x28, 0x33, 0x0e,
	0xfb, 0xb7, 0x0e, 0xd1, 0xa0, 0xe3, 0x25, 0xd5, 0xff, 0xf7, 0x02, 0xb7, 0x66, 0x14, 0xbf, 0x79,
	0xf7, 0x1d, 0xdd, 0xe9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x59, 0xc4, 0x1b, 0xea, 0xaf, 0x00, 0x00,
	0x00,
}

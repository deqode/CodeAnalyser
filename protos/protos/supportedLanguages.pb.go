// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/versions/supportedLanguages.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SupportedLanguages struct {
	Languages []*Language `protobuf:"bytes,1,rep,name=languages" json:"languages,omitempty"`
}

func (m *SupportedLanguages) Reset()                    { *m = SupportedLanguages{} }
func (m *SupportedLanguages) String() string            { return proto.CompactTextString(m) }
func (*SupportedLanguages) ProtoMessage()               {}
func (*SupportedLanguages) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{0} }

func (m *SupportedLanguages) GetLanguages() []*Language {
	if m != nil {
		return m.Languages
	}
	return nil
}

type Language struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *Language) Reset()                    { *m = Language{} }
func (m *Language) String() string            { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()               {}
func (*Language) Descriptor() ([]byte, []int) { return fileDescriptor21, []int{1} }

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Language) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*SupportedLanguages)(nil), "supportedLanguages")
	proto.RegisterType((*Language)(nil), "Language")
}

func init() { proto.RegisterFile("protos/versions/supportedLanguages.proto", fileDescriptor21) }

var fileDescriptor21 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x2f, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x2b, 0xd6, 0x2f, 0x2e, 0x2d, 0x28,
	0xc8, 0x2f, 0x2a, 0x49, 0x4d, 0xf1, 0x49, 0xcc, 0x4b, 0x2f, 0x4d, 0x4c, 0x4f, 0x2d, 0xd6, 0x03,
	0x2b, 0x51, 0xb2, 0xe5, 0x12, 0xc2, 0x94, 0x13, 0x52, 0xe7, 0xe2, 0xcc, 0x81, 0x71, 0x24, 0x18,
	0x15, 0x98, 0x35, 0xb8, 0x8d, 0x38, 0xf5, 0x60, 0xd2, 0x41, 0x08, 0x39, 0x25, 0x23, 0x2e, 0x0e,
	0x98, 0xb0, 0x90, 0x10, 0x17, 0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67,
	0x10, 0x98, 0x0d, 0x12, 0x2b, 0x48, 0x2c, 0xc9, 0x90, 0x60, 0x82, 0x88, 0x81, 0xd8, 0x4e, 0x5c,
	0x51, 0x1c, 0x7a, 0xfa, 0x10, 0x07, 0x26, 0xb1, 0x81, 0x69, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x77, 0xb7, 0x98, 0xc4, 0xb1, 0x00, 0x00, 0x00,
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/versions/language.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LanguageVersion struct {
	Runtimeversions *RuntimeVersions  `protobuf:"bytes,1,opt,name=runtimeversions" json:"runtimeversions,omitempty"`
	Framework       []*PluginVersions `protobuf:"bytes,2,rep,name=framework" json:"framework,omitempty"`
	Databases       []*PluginVersions `protobuf:"bytes,3,rep,name=databases" json:"databases,omitempty"`
	Orms            []*PluginVersions `protobuf:"bytes,4,rep,name=orms" json:"orms,omitempty"`
	Libraries       []*PluginVersions `protobuf:"bytes,5,rep,name=libraries" json:"libraries,omitempty"`
	Dependencies    []*PluginVersions `protobuf:"bytes,6,rep,name=dependencies" json:"dependencies,omitempty"`
}

func (m *LanguageVersion) Reset()                    { *m = LanguageVersion{} }
func (m *LanguageVersion) String() string            { return proto.CompactTextString(m) }
func (*LanguageVersion) ProtoMessage()               {}
func (*LanguageVersion) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{0} }

func (m *LanguageVersion) GetRuntimeversions() *RuntimeVersions {
	if m != nil {
		return m.Runtimeversions
	}
	return nil
}

func (m *LanguageVersion) GetFramework() []*PluginVersions {
	if m != nil {
		return m.Framework
	}
	return nil
}

func (m *LanguageVersion) GetDatabases() []*PluginVersions {
	if m != nil {
		return m.Databases
	}
	return nil
}

func (m *LanguageVersion) GetOrms() []*PluginVersions {
	if m != nil {
		return m.Orms
	}
	return nil
}

func (m *LanguageVersion) GetLibraries() []*PluginVersions {
	if m != nil {
		return m.Libraries
	}
	return nil
}

func (m *LanguageVersion) GetDependencies() []*PluginVersions {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

type RuntimeVersions struct {
	Detector string          `protobuf:"bytes,1,opt,name=detector" json:"detector,omitempty"`
	Versions []*PluginSemver `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
}

func (m *RuntimeVersions) Reset()                    { *m = RuntimeVersions{} }
func (m *RuntimeVersions) String() string            { return proto.CompactTextString(m) }
func (*RuntimeVersions) ProtoMessage()               {}
func (*RuntimeVersions) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{1} }

func (m *RuntimeVersions) GetDetector() string {
	if m != nil {
		return m.Detector
	}
	return ""
}

func (m *RuntimeVersions) GetVersions() []*PluginSemver {
	if m != nil {
		return m.Versions
	}
	return nil
}

type PluginVersions struct {
	Versions []*PluginSemver `protobuf:"bytes,2,rep,name=versions" json:"versions,omitempty"`
}

func (m *PluginVersions) Reset()                    { *m = PluginVersions{} }
func (m *PluginVersions) String() string            { return proto.CompactTextString(m) }
func (*PluginVersions) ProtoMessage()               {}
func (*PluginVersions) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{2} }

func (m *PluginVersions) GetVersions() []*PluginSemver {
	if m != nil {
		return m.Versions
	}
	return nil
}

type PluginSemver struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Semver        string `protobuf:"bytes,2,opt,name=semver" json:"semver,omitempty"`
	Plugincommand string `protobuf:"bytes,4,opt,name=plugincommand" json:"plugincommand,omitempty"`
}

func (m *PluginSemver) Reset()                    { *m = PluginSemver{} }
func (m *PluginSemver) String() string            { return proto.CompactTextString(m) }
func (*PluginSemver) ProtoMessage()               {}
func (*PluginSemver) Descriptor() ([]byte, []int) { return fileDescriptor20, []int{3} }

func (m *PluginSemver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PluginSemver) GetSemver() string {
	if m != nil {
		return m.Semver
	}
	return ""
}

func (m *PluginSemver) GetPlugincommand() string {
	if m != nil {
		return m.Plugincommand
	}
	return ""
}

func init() {
	proto.RegisterType((*LanguageVersion)(nil), "LanguageVersion")
	proto.RegisterType((*RuntimeVersions)(nil), "RuntimeVersions")
	proto.RegisterType((*PluginVersions)(nil), "PluginVersions")
	proto.RegisterType((*PluginSemver)(nil), "PluginSemver")
}

func init() { proto.RegisterFile("protos/versions/language.proto", fileDescriptor20) }

var fileDescriptor20 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4f, 0xbb, 0x30,
	0x18, 0xc6, 0x33, 0xc6, 0x9f, 0xb0, 0x77, 0xdb, 0x1f, 0xd3, 0x83, 0x69, 0x3c, 0x98, 0x05, 0x3d,
	0xcc, 0x83, 0x90, 0x6c, 0x37, 0xbd, 0x79, 0xf6, 0x60, 0x30, 0x31, 0xc6, 0x93, 0x05, 0x5e, 0x09,
	0x91, 0xb6, 0xa4, 0x85, 0xf9, 0xc5, 0xfc, 0x80, 0x86, 0x82, 0x55, 0x96, 0xed, 0xe0, 0x09, 0xde,
	0xe7, 0xf9, 0x3d, 0x6f, 0x9b, 0x27, 0x85, 0xf3, 0x5a, 0xc9, 0x46, 0xea, 0x78, 0x87, 0x4a, 0x97,
	0x52, 0xe8, 0xb8, 0x62, 0xa2, 0x68, 0x59, 0x81, 0x91, 0x31, 0xc2, 0x4f, 0x07, 0x82, 0xfb, 0x41,
	0x7a, 0xea, 0x19, 0x72, 0x03, 0x81, 0x6a, 0x45, 0x53, 0x72, 0xfc, 0x4e, 0xd1, 0xc9, 0x6a, 0xb2,
	0x9e, 0x6f, 0x4e, 0xa2, 0xa4, 0xd7, 0x07, 0x52, 0x27, 0xfb, 0x20, 0xb9, 0x86, 0xd9, 0x9b, 0x62,
	0x1c, 0x3f, 0xa4, 0x7a, 0xa7, 0xce, 0x6a, 0xba, 0x9e, 0x6f, 0x82, 0xe8, 0xa1, 0x6a, 0x8b, 0x52,
	0xd8, 0xd0, 0x0f, 0xd1, 0xe1, 0x39, 0x6b, 0x58, 0xca, 0x34, 0x6a, 0x3a, 0x3d, 0x82, 0x5b, 0x82,
	0x5c, 0x80, 0x2b, 0x15, 0xd7, 0xd4, 0x3d, 0x4c, 0x1a, 0xb3, 0xdb, 0x59, 0x95, 0xa9, 0x62, 0xaa,
	0x44, 0x4d, 0xff, 0x1d, 0xd9, 0x69, 0x09, 0xb2, 0x85, 0x45, 0x8e, 0x35, 0x8a, 0x1c, 0x45, 0xd6,
	0x25, 0xbc, 0xc3, 0x89, 0x11, 0x14, 0x3e, 0x43, 0xb0, 0x57, 0x05, 0x39, 0x03, 0x3f, 0xc7, 0x06,
	0xb3, 0x46, 0x2a, 0x53, 0xd7, 0x2c, 0xb1, 0x33, 0xb9, 0x02, 0xdf, 0x56, 0xd9, 0x97, 0xb2, 0x1c,
	0xf6, 0x3f, 0x22, 0xdf, 0xa1, 0x4a, 0xac, 0x1d, 0xde, 0xc2, 0xff, 0xf1, 0xc9, 0x7f, 0x09, 0xbf,
	0xc2, 0xe2, 0xb7, 0x43, 0x08, 0xb8, 0x82, 0x71, 0x1c, 0xee, 0x63, 0xfe, 0xc9, 0x29, 0x78, 0xda,
	0xb8, 0xd4, 0x31, 0xea, 0x30, 0x91, 0x4b, 0x58, 0xd6, 0x26, 0x9b, 0x49, 0xce, 0x99, 0xc8, 0xa9,
	0x6b, 0xec, 0xb1, 0x78, 0x07, 0x2f, 0x7e, 0x14, 0xf7, 0x6f, 0x2a, 0xf5, 0xcc, 0x77, 0xfb, 0x15,
	0x00, 0x00, 0xff, 0xff, 0x04, 0x13, 0x17, 0x87, 0x64, 0x02, 0x00, 0x00,
}

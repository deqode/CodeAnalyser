// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaticAssetsServiceClient is the client API for StaticAssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaticAssetsServiceClient interface {
	Detect(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputStaticAssets, error)
}

type staticAssetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaticAssetsServiceClient(cc grpc.ClientConnInterface) StaticAssetsServiceClient {
	return &staticAssetsServiceClient{cc}
}

func (c *staticAssetsServiceClient) Detect(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputStaticAssets, error) {
	out := new(ServiceOutputStaticAssets)
	err := c.cc.Invoke(ctx, "/proto.StaticAssetsService/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaticAssetsServiceServer is the server API for StaticAssetsService service.
// All implementations should embed UnimplementedStaticAssetsServiceServer
// for forward compatibility
type StaticAssetsServiceServer interface {
	Detect(context.Context, *ServiceInput) (*ServiceOutputStaticAssets, error)
}

// UnimplementedStaticAssetsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStaticAssetsServiceServer struct {
}

func (UnimplementedStaticAssetsServiceServer) Detect(context.Context, *ServiceInput) (*ServiceOutputStaticAssets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}

// UnsafeStaticAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaticAssetsServiceServer will
// result in compilation errors.
type UnsafeStaticAssetsServiceServer interface {
	mustEmbedUnimplementedStaticAssetsServiceServer()
}

func RegisterStaticAssetsServiceServer(s grpc.ServiceRegistrar, srv StaticAssetsServiceServer) {
	s.RegisterService(&StaticAssetsService_ServiceDesc, srv)
}

func _StaticAssetsService_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaticAssetsServiceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaticAssetsService/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaticAssetsServiceServer).Detect(ctx, req.(*ServiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// StaticAssetsService_ServiceDesc is the grpc.ServiceDesc for StaticAssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaticAssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StaticAssetsService",
	HandlerType: (*StaticAssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _StaticAssetsService_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/plugin/staticAssets.proto",
}

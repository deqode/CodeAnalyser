// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	helpers "code-analyser/protos/pb/helpers"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrameworkClient is the client API for Framework service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrameworkClient interface {
	Detect(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.BoolOutput, error)
	IsUsed(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.BoolOutput, error)
	PercentOfUsed(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.FloatOutput, error)
}

type frameworkClient struct {
	cc grpc.ClientConnInterface
}

func NewFrameworkClient(cc grpc.ClientConnInterface) FrameworkClient {
	return &frameworkClient{cc}
}

func (c *frameworkClient) Detect(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.BoolOutput, error) {
	out := new(helpers.BoolOutput)
	err := c.cc.Invoke(ctx, "/proto.Framework/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameworkClient) IsUsed(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.BoolOutput, error) {
	out := new(helpers.BoolOutput)
	err := c.cc.Invoke(ctx, "/proto.Framework/IsUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frameworkClient) PercentOfUsed(ctx context.Context, in *helpers.Input, opts ...grpc.CallOption) (*helpers.FloatOutput, error) {
	out := new(helpers.FloatOutput)
	err := c.cc.Invoke(ctx, "/proto.Framework/PercentOfUsed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrameworkServer is the server API for Framework service.
// All implementations should embed UnimplementedFrameworkServer
// for forward compatibility
type FrameworkServer interface {
	Detect(context.Context, *helpers.Input) (*helpers.BoolOutput, error)
	IsUsed(context.Context, *helpers.Input) (*helpers.BoolOutput, error)
	PercentOfUsed(context.Context, *helpers.Input) (*helpers.FloatOutput, error)
}

// UnimplementedFrameworkServer should be embedded to have forward compatible implementations.
type UnimplementedFrameworkServer struct {
}

func (UnimplementedFrameworkServer) Detect(context.Context, *helpers.Input) (*helpers.BoolOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}
func (UnimplementedFrameworkServer) IsUsed(context.Context, *helpers.Input) (*helpers.BoolOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUsed not implemented")
}
func (UnimplementedFrameworkServer) PercentOfUsed(context.Context, *helpers.Input) (*helpers.FloatOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PercentOfUsed not implemented")
}

// UnsafeFrameworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrameworkServer will
// result in compilation errors.
type UnsafeFrameworkServer interface {
	mustEmbedUnimplementedFrameworkServer()
}

func RegisterFrameworkServer(s grpc.ServiceRegistrar, srv FrameworkServer) {
	s.RegisterService(&Framework_ServiceDesc, srv)
}

func _Framework_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helpers.Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameworkServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Framework/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameworkServer).Detect(ctx, req.(*helpers.Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Framework_IsUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helpers.Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameworkServer).IsUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Framework/IsUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameworkServer).IsUsed(ctx, req.(*helpers.Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Framework_PercentOfUsed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(helpers.Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrameworkServer).PercentOfUsed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Framework/PercentOfUsed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrameworkServer).PercentOfUsed(ctx, req.(*helpers.Input))
	}
	return interceptor(ctx, in, info, handler)
}

// Framework_ServiceDesc is the grpc.ServiceDesc for Framework service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Framework_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Framework",
	HandlerType: (*FrameworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _Framework_Detect_Handler,
		},
		{
			MethodName: "IsUsed",
			Handler:    _Framework_IsUsed_Handler,
		},
		{
			MethodName: "PercentOfUsed",
			Handler:    _Framework_PercentOfUsed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/plugin/framework.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestCaseCommandsClient is the client API for TestCaseCommands service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestCaseCommandsClient interface {
	Detect(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputTestCommand, error)
}

type testCaseCommandsClient struct {
	cc grpc.ClientConnInterface
}

func NewTestCaseCommandsClient(cc grpc.ClientConnInterface) TestCaseCommandsClient {
	return &testCaseCommandsClient{cc}
}

func (c *testCaseCommandsClient) Detect(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputTestCommand, error) {
	out := new(ServiceOutputTestCommand)
	err := c.cc.Invoke(ctx, "/proto.TestCaseCommands/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCaseCommandsServer is the server API for TestCaseCommands service.
// All implementations should embed UnimplementedTestCaseCommandsServer
// for forward compatibility
type TestCaseCommandsServer interface {
	Detect(context.Context, *ServiceInput) (*ServiceOutputTestCommand, error)
}

// UnimplementedTestCaseCommandsServer should be embedded to have forward compatible implementations.
type UnimplementedTestCaseCommandsServer struct {
}

func (UnimplementedTestCaseCommandsServer) Detect(context.Context, *ServiceInput) (*ServiceOutputTestCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detect not implemented")
}

// UnsafeTestCaseCommandsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestCaseCommandsServer will
// result in compilation errors.
type UnsafeTestCaseCommandsServer interface {
	mustEmbedUnimplementedTestCaseCommandsServer()
}

func RegisterTestCaseCommandsServer(s grpc.ServiceRegistrar, srv TestCaseCommandsServer) {
	s.RegisterService(&TestCaseCommands_ServiceDesc, srv)
}

func _TestCaseCommands_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseCommandsServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestCaseCommands/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseCommandsServer).Detect(ctx, req.(*ServiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// TestCaseCommands_ServiceDesc is the grpc.ServiceDesc for TestCaseCommands service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestCaseCommands_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestCaseCommands",
	HandlerType: (*TestCaseCommandsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Detect",
			Handler:    _TestCaseCommands_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/plugin/test_case_commands.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetLibrariesServiceClient is the client API for GetLibrariesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetLibrariesServiceClient interface {
	GetLibraries(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputStringMap, error)
}

type getLibrariesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetLibrariesServiceClient(cc grpc.ClientConnInterface) GetLibrariesServiceClient {
	return &getLibrariesServiceClient{cc}
}

func (c *getLibrariesServiceClient) GetLibraries(ctx context.Context, in *ServiceInput, opts ...grpc.CallOption) (*ServiceOutputStringMap, error) {
	out := new(ServiceOutputStringMap)
	err := c.cc.Invoke(ctx, "/proto.GetLibrariesService/GetLibraries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetLibrariesServiceServer is the server API for GetLibrariesService service.
// All implementations must embed UnimplementedGetLibrariesServiceServer
// for forward compatibility
type GetLibrariesServiceServer interface {
	GetLibraries(context.Context, *ServiceInput) (*ServiceOutputStringMap, error)
	//mustEmbedUnimplementedGetLibrariesServiceServer()
}

// UnimplementedGetLibrariesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetLibrariesServiceServer struct {
}

func (UnimplementedGetLibrariesServiceServer) GetLibraries(context.Context, *ServiceInput) (*ServiceOutputStringMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibraries not implemented")
}
func (UnimplementedGetLibrariesServiceServer) mustEmbedUnimplementedGetLibrariesServiceServer() {}

// UnsafeGetLibrariesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetLibrariesServiceServer will
// result in compilation errors.
type UnsafeGetLibrariesServiceServer interface {
	mustEmbedUnimplementedGetLibrariesServiceServer()
}

func RegisterGetLibrariesServiceServer(s grpc.ServiceRegistrar, srv GetLibrariesServiceServer) {
	s.RegisterService(&GetLibrariesService_ServiceDesc, srv)
}

func _GetLibrariesService_GetLibraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetLibrariesServiceServer).GetLibraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetLibrariesService/GetLibraries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetLibrariesServiceServer).GetLibraries(ctx, req.(*ServiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GetLibrariesService_ServiceDesc is the grpc.ServiceDesc for GetLibrariesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetLibrariesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetLibrariesService",
	HandlerType: (*GetLibrariesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLibraries",
			Handler:    _GetLibrariesService_GetLibraries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/library.proto",
}

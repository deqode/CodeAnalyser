// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DetectRuntimeServiceClient is the client API for DetectRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetectRuntimeServiceClient interface {
	DetectRuntime(ctx context.Context, in *ServiceInputString, opts ...grpc.CallOption) (*ServiceOutputString, error)
}

type detectRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDetectRuntimeServiceClient(cc grpc.ClientConnInterface) DetectRuntimeServiceClient {
	return &detectRuntimeServiceClient{cc}
}

func (c *detectRuntimeServiceClient) DetectRuntime(ctx context.Context, in *ServiceInputString, opts ...grpc.CallOption) (*ServiceOutputString, error) {
	out := new(ServiceOutputString)
	err := c.cc.Invoke(ctx, "/proto.DetectRuntimeService/DetectRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetectRuntimeServiceServer is the server API for DetectRuntimeService service.
// All implementations must embed UnimplementedDetectRuntimeServiceServer
// for forward compatibility
type DetectRuntimeServiceServer interface {
	DetectRuntime(context.Context, *ServiceInputString) (*ServiceOutputString, error)
//	mustEmbedUnimplementedDetectRuntimeServiceServer()
}

// UnimplementedDetectRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDetectRuntimeServiceServer struct {
}

func (UnimplementedDetectRuntimeServiceServer) DetectRuntime(context.Context, *ServiceInputString) (*ServiceOutputString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectRuntime not implemented")
}
func (UnimplementedDetectRuntimeServiceServer) mustEmbedUnimplementedDetectRuntimeServiceServer() {}

// UnsafeDetectRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetectRuntimeServiceServer will
// result in compilation errors.
type UnsafeDetectRuntimeServiceServer interface {
	mustEmbedUnimplementedDetectRuntimeServiceServer()
}

func RegisterDetectRuntimeServiceServer(s grpc.ServiceRegistrar, srv DetectRuntimeServiceServer) {
	s.RegisterService(&DetectRuntimeService_ServiceDesc, srv)
}

func _DetectRuntimeService_DetectRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInputString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetectRuntimeServiceServer).DetectRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DetectRuntimeService/DetectRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetectRuntimeServiceServer).DetectRuntime(ctx, req.(*ServiceInputString))
	}
	return interceptor(ctx, in, info, handler)
}

// DetectRuntimeService_ServiceDesc is the grpc.ServiceDesc for DetectRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetectRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DetectRuntimeService",
	HandlerType: (*DetectRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectRuntime",
			Handler:    _DetectRuntimeService_DetectRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/detectRuntime.proto",
}
